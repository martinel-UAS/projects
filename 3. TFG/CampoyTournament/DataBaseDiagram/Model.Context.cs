//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataBaseDiagram
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CampoyTournamentEntities : DbContext
    {
        public CampoyTournamentEntities()
            : base("name=CampoyTournamentEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Field> Field { get; set; }
        public DbSet<Hole> Hole { get; set; }
        public DbSet<Match> Match { get; set; }
        public DbSet<Player> Player { get; set; }
        public DbSet<Result> Result { get; set; }
        public DbSet<Role> Role { get; set; }
        public DbSet<Tournament> Tournament { get; set; }
        public DbSet<User> User { get; set; }
    
        public virtual int uspDeleteField(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteField", idParameter);
        }
    
        public virtual int uspDeleteHole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteHole", idParameter);
        }
    
        public virtual int uspDeleteMatch(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteMatch", idParameter);
        }
    
        public virtual int uspDeletePlayer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeletePlayer", idParameter);
        }
    
        public virtual int uspDeleteResult(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteResult", idParameter);
        }
    
        public virtual int uspDeleteRole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteRole", idParameter);
        }
    
        public virtual int uspDeleteTournament(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteTournament", idParameter);
        }
    
        public virtual int uspDeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspDeleteUser", idParameter);
        }
    
        public virtual ObjectResult<uspGetAllField_Result> uspGetAllField()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllField_Result>("uspGetAllField");
        }
    
        public virtual ObjectResult<uspGetAllHole_Result> uspGetAllHole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllHole_Result>("uspGetAllHole");
        }
    
        public virtual ObjectResult<uspGetAllMatch_Result> uspGetAllMatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllMatch_Result>("uspGetAllMatch");
        }
    
        public virtual ObjectResult<uspGetAllPlayer_Result> uspGetAllPlayer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllPlayer_Result>("uspGetAllPlayer");
        }
    
        public virtual ObjectResult<uspGetAllResult_Result> uspGetAllResult()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllResult_Result>("uspGetAllResult");
        }
    
        public virtual ObjectResult<uspGetAllRole_Result> uspGetAllRole()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllRole_Result>("uspGetAllRole");
        }
    
        public virtual ObjectResult<uspGetAllTournament_Result> uspGetAllTournament()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllTournament_Result>("uspGetAllTournament");
        }
    
        public virtual ObjectResult<uspGetAllUser_Result> uspGetAllUser()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetAllUser_Result>("uspGetAllUser");
        }
    
        public virtual ObjectResult<uspGetFieldById_Result> uspGetFieldById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetFieldById_Result>("uspGetFieldById", idParameter);
        }
    
        public virtual int uspGetFields(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetFields", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetHoleById_Result> uspGetHoleById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetHoleById_Result>("uspGetHoleById", idParameter);
        }
    
        public virtual int uspGetHoles(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetHoles", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetMatchById_Result> uspGetMatchById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetMatchById_Result>("uspGetMatchById", idParameter);
        }
    
        public virtual int uspGetMatchs(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetMatchs", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetPlayerById_Result> uspGetPlayerById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetPlayerById_Result>("uspGetPlayerById", idParameter);
        }
    
        public virtual int uspGetPlayers(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetPlayers", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetResultById_Result> uspGetResultById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetResultById_Result>("uspGetResultById", idParameter);
        }
    
        public virtual int uspGetResults(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetResults", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetRoleById_Result> uspGetRoleById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetRoleById_Result>("uspGetRoleById", idParameter);
        }
    
        public virtual int uspGetRoles(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetRoles", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetTournamentById_Result> uspGetTournamentById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetTournamentById_Result>("uspGetTournamentById", idParameter);
        }
    
        public virtual int uspGetTournaments(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetTournaments", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual ObjectResult<uspGetUserById_Result> uspGetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspGetUserById_Result>("uspGetUserById", idParameter);
        }
    
        public virtual int uspGetUsers(string whereClause, string orderByClause)
        {
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("whereClause", whereClause) :
                new ObjectParameter("whereClause", typeof(string));
    
            var orderByClauseParameter = orderByClause != null ?
                new ObjectParameter("OrderByClause", orderByClause) :
                new ObjectParameter("OrderByClause", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGetUsers", whereClauseParameter, orderByClauseParameter);
        }
    
        public virtual int uspInsertField(string name, string address, string city, string province, string web, string email, string phone, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var webParameter = web != null ?
                new ObjectParameter("Web", web) :
                new ObjectParameter("Web", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertField", nameParameter, addressParameter, cityParameter, provinceParameter, webParameter, emailParameter, phoneParameter, isDeletedParameter, id);
        }
    
        public virtual int uspInsertHole(Nullable<int> fieldId, Nullable<int> handicap, Nullable<int> distance, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            var handicapParameter = handicap.HasValue ?
                new ObjectParameter("Handicap", handicap) :
                new ObjectParameter("Handicap", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertHole", fieldIdParameter, handicapParameter, distanceParameter, isDeletedParameter, id);
        }
    
        public virtual int uspInsertMatch(Nullable<int> tournamentId, Nullable<int> fieldId, Nullable<System.DateTime> date, Nullable<bool> isDeleted, Nullable<bool> isTournament, ObjectParameter id)
        {
            var tournamentIdParameter = tournamentId.HasValue ?
                new ObjectParameter("TournamentId", tournamentId) :
                new ObjectParameter("TournamentId", typeof(int));
    
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isTournamentParameter = isTournament.HasValue ?
                new ObjectParameter("IsTournament", isTournament) :
                new ObjectParameter("IsTournament", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertMatch", tournamentIdParameter, fieldIdParameter, dateParameter, isDeletedParameter, isTournamentParameter, id);
        }
    
        public virtual int uspInsertPlayer(string license, string alias, string phone, Nullable<double> realHP, Nullable<double> gameHP, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var realHPParameter = realHP.HasValue ?
                new ObjectParameter("RealHP", realHP) :
                new ObjectParameter("RealHP", typeof(double));
    
            var gameHPParameter = gameHP.HasValue ?
                new ObjectParameter("GameHP", gameHP) :
                new ObjectParameter("GameHP", typeof(double));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertPlayer", licenseParameter, aliasParameter, phoneParameter, realHPParameter, gameHPParameter, isDeletedParameter, id);
        }
    
        public virtual int uspInsertResult(Nullable<int> holeId, Nullable<int> matchId, Nullable<int> playerId, Nullable<int> strikes, Nullable<double> handicap, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var holeIdParameter = holeId.HasValue ?
                new ObjectParameter("HoleId", holeId) :
                new ObjectParameter("HoleId", typeof(int));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("MatchId", matchId) :
                new ObjectParameter("MatchId", typeof(int));
    
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var strikesParameter = strikes.HasValue ?
                new ObjectParameter("Strikes", strikes) :
                new ObjectParameter("Strikes", typeof(int));
    
            var handicapParameter = handicap.HasValue ?
                new ObjectParameter("Handicap", handicap) :
                new ObjectParameter("Handicap", typeof(double));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertResult", holeIdParameter, matchIdParameter, playerIdParameter, strikesParameter, handicapParameter, isDeletedParameter, id);
        }
    
        public virtual int uspInsertRole(string roleName, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertRole", roleNameParameter, isDeletedParameter, id);
        }
    
        public virtual int uspInsertTournament(Nullable<int> year, Nullable<bool> isDeleted, Nullable<bool> isFinished, ObjectParameter id)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isFinishedParameter = isFinished.HasValue ?
                new ObjectParameter("IsFinished", isFinished) :
                new ObjectParameter("IsFinished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertTournament", yearParameter, isDeletedParameter, isFinishedParameter, id);
        }
    
        public virtual int uspInsertUser(string name, string surname, string email, string password, Nullable<int> roleId, Nullable<int> playerId, Nullable<bool> isDeleted, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertUser", nameParameter, surnameParameter, emailParameter, passwordParameter, roleIdParameter, playerIdParameter, isDeletedParameter, id);
        }
    
        public virtual int uspLogicalDeleteField(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteField", idParameter);
        }
    
        public virtual int uspLogicalDeleteHole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteHole", idParameter);
        }
    
        public virtual int uspLogicalDeleteMatch(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteMatch", idParameter);
        }
    
        public virtual int uspLogicalDeletePlayer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeletePlayer", idParameter);
        }
    
        public virtual int uspLogicalDeleteResult(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteResult", idParameter);
        }
    
        public virtual int uspLogicalDeleteRole(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteRole", idParameter);
        }
    
        public virtual int uspLogicalDeleteTournament(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteTournament", idParameter);
        }
    
        public virtual int uspLogicalDeleteUser(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspLogicalDeleteUser", idParameter);
        }
    
        public virtual int uspUpdateField(Nullable<int> id, string name, string address, string city, string province, string web, string email, string phone, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var provinceParameter = province != null ?
                new ObjectParameter("Province", province) :
                new ObjectParameter("Province", typeof(string));
    
            var webParameter = web != null ?
                new ObjectParameter("Web", web) :
                new ObjectParameter("Web", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateField", idParameter, nameParameter, addressParameter, cityParameter, provinceParameter, webParameter, emailParameter, phoneParameter, isDeletedParameter);
        }
    
        public virtual int uspUpdateHole(Nullable<int> id, Nullable<int> fieldId, Nullable<int> handicap, Nullable<int> distance, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            var handicapParameter = handicap.HasValue ?
                new ObjectParameter("Handicap", handicap) :
                new ObjectParameter("Handicap", typeof(int));
    
            var distanceParameter = distance.HasValue ?
                new ObjectParameter("Distance", distance) :
                new ObjectParameter("Distance", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateHole", idParameter, fieldIdParameter, handicapParameter, distanceParameter, isDeletedParameter);
        }
    
        public virtual int uspUpdateMatch(Nullable<int> id, Nullable<int> tournamentId, Nullable<int> fieldId, Nullable<System.DateTime> date, Nullable<bool> isDeleted, Nullable<bool> isTournament)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var tournamentIdParameter = tournamentId.HasValue ?
                new ObjectParameter("TournamentId", tournamentId) :
                new ObjectParameter("TournamentId", typeof(int));
    
            var fieldIdParameter = fieldId.HasValue ?
                new ObjectParameter("FieldId", fieldId) :
                new ObjectParameter("FieldId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isTournamentParameter = isTournament.HasValue ?
                new ObjectParameter("IsTournament", isTournament) :
                new ObjectParameter("IsTournament", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateMatch", idParameter, tournamentIdParameter, fieldIdParameter, dateParameter, isDeletedParameter, isTournamentParameter);
        }
    
        public virtual int uspUpdatePlayer(Nullable<int> id, string license, string alias, string phone, Nullable<double> realHP, Nullable<double> gameHP, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var licenseParameter = license != null ?
                new ObjectParameter("License", license) :
                new ObjectParameter("License", typeof(string));
    
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var realHPParameter = realHP.HasValue ?
                new ObjectParameter("RealHP", realHP) :
                new ObjectParameter("RealHP", typeof(double));
    
            var gameHPParameter = gameHP.HasValue ?
                new ObjectParameter("GameHP", gameHP) :
                new ObjectParameter("GameHP", typeof(double));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdatePlayer", idParameter, licenseParameter, aliasParameter, phoneParameter, realHPParameter, gameHPParameter, isDeletedParameter);
        }
    
        public virtual int uspUpdateResult(Nullable<int> id, Nullable<int> holeId, Nullable<int> matchId, Nullable<int> playerId, Nullable<int> strikes, Nullable<double> handicap, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var holeIdParameter = holeId.HasValue ?
                new ObjectParameter("HoleId", holeId) :
                new ObjectParameter("HoleId", typeof(int));
    
            var matchIdParameter = matchId.HasValue ?
                new ObjectParameter("MatchId", matchId) :
                new ObjectParameter("MatchId", typeof(int));
    
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var strikesParameter = strikes.HasValue ?
                new ObjectParameter("Strikes", strikes) :
                new ObjectParameter("Strikes", typeof(int));
    
            var handicapParameter = handicap.HasValue ?
                new ObjectParameter("Handicap", handicap) :
                new ObjectParameter("Handicap", typeof(double));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateResult", idParameter, holeIdParameter, matchIdParameter, playerIdParameter, strikesParameter, handicapParameter, isDeletedParameter);
        }
    
        public virtual int uspUpdateRole(Nullable<int> id, string roleName, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateRole", idParameter, roleNameParameter, isDeletedParameter);
        }
    
        public virtual int uspUpdateTournament(Nullable<int> id, Nullable<int> year, Nullable<bool> isDeleted, Nullable<bool> isFinished)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            var isFinishedParameter = isFinished.HasValue ?
                new ObjectParameter("IsFinished", isFinished) :
                new ObjectParameter("IsFinished", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateTournament", idParameter, yearParameter, isDeletedParameter, isFinishedParameter);
        }
    
        public virtual int uspUpdateUser(Nullable<int> id, string name, string surname, string email, string password, Nullable<int> roleId, Nullable<int> playerId, Nullable<bool> isDeleted)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var surnameParameter = surname != null ?
                new ObjectParameter("Surname", surname) :
                new ObjectParameter("Surname", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var playerIdParameter = playerId.HasValue ?
                new ObjectParameter("PlayerId", playerId) :
                new ObjectParameter("PlayerId", typeof(int));
    
            var isDeletedParameter = isDeleted.HasValue ?
                new ObjectParameter("IsDeleted", isDeleted) :
                new ObjectParameter("IsDeleted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateUser", idParameter, nameParameter, surnameParameter, emailParameter, passwordParameter, roleIdParameter, playerIdParameter, isDeletedParameter);
        }
    }
}
